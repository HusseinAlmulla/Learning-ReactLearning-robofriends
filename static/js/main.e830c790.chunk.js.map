{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","CardComponent","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","marginTop","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","Response","json","users","filterRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAZF,SAACC,GACV,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,cACpB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCOXC,EAbE,SAAC,GAAgB,IAExBC,EAFuB,EAAbC,OAEaC,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOR,GAAIO,EAAKP,GAAIC,KAAMM,EAAKN,KAAMC,MAAOK,EAAKL,WAGvE,OACI,6BACKE,ICDEM,EARG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,6BACI,2BAAQd,UAAU,gCAAgCe,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCMnGI,G,MATA,SAACnB,GACf,OAEC,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,MAAOC,OAAQ,QAASC,UAAW,SAC5ExB,EAAMyB,YCgBKC,E,YAnBd,WAAY1B,GAAO,IAAD,8BACjB,4CAAMA,KACD2B,MAAQ,CAAEC,UAAU,GAFR,E,+EAKAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,qEAGAG,KAAK/B,MAAMyB,a,GAfOQ,aCiDbC,E,YAzCX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJP,E,iFAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEvB,OAAQmC,S,+BAOrC,IAAD,OACCC,EAAed,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAArC,GAC1C,OAAOA,EAAOJ,KAAK0C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAErE,OAAiC,IAA7BhB,KAAKJ,MAAMlB,OAAOwC,OACX,uCAIH,yBAAKhD,UAAU,MACX,8CACA,kBAAC,EAAD,CAAWc,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,W,GAlC5BZ,aCDlBiB,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SP0HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.e830c790.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa2 ma2 grow bw2 shadow-5'>\r\n            <img alt='Robot' src={`https://robohash.org/${props.id}?200x200`}></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n    const CardComponent = robots.map((user, index) => {\r\n        return <Card key={index} id={user.id} name={user.name} email={user.email} />\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {CardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div>\r\n            <input  className='pa3 ba b--green bg-light-blue' type='search' placeholder=' Search robot' onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t// Using two curly pracket will return obejct.\r\n\t\t<div style={{ overflowY: 'scroll', border: '0px', height: '800px', marginTop: '20px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = { hasError: false};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true});\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>There was problem in loading the page</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\n// import { robots } from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary'\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(Response => Response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const filterRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        }\r\n        else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1>The RobFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filterRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div >\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />\r\n    , document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}